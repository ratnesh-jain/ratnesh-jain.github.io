<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ratnesh Jain</title><description>Ratnesh Jain's Personal blog</description><link>https://ratnesh-jain.github.io</link><language>en</language><lastBuildDate>Mon, 19 Aug 2024 13:20:42 +0530</lastBuildDate><pubDate>Mon, 19 Aug 2024 13:20:42 +0530</pubDate><ttl>250</ttl><atom:link href="https://ratnesh-jain.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://ratnesh-jain.github.io/stories/MultipleSceneSupportInTCA</guid><title>Multiple Scene Support in TCA.</title><description>Allow multiple scenes for SwiftUI App in TCA.</description><link>https://ratnesh-jain.github.io/stories/MultipleSceneSupportInTCA</link><pubDate>Sun, 14 Apr 2024 15:30:00 +0530</pubDate><content:encoded><![CDATA[<h1>Multiple Scene Support in TCA.</h1><p>When developing an app with SwiftUI, it offers seamless adoption for various platforms such as <code>iPadOS</code>, <code>macOS</code>, <code>watchOS</code>, and <code>visionOS</code>, leveraging SwiftUI's inherent adaptability to render components appropriately across these platforms.</p><p>In this article, we delve into the additional features brought about by adopting for iPadOS, particularly focusing on enabling multiple windows, referred to as scenes in the development context.</p><video controls>
    <source src="https://ratnesh-jain.github.io/Videos/MultipleScene.mov" type="video/mp4">
</video><p>Enabling multiple scenes requires adding a key into the Info.plist of the app. Here's what it looks like:</p><pre><code>&lt;dict&gt;
    &lt;key&gt;<span class="type">UIApplicationSupportsMultipleScenes</span>&lt;/key&gt;
    &lt;<span class="keyword">true</span>/&gt;
    &lt;key&gt;<span class="type">UISceneConfigurations</span>&lt;/key&gt;
    &lt;dict/&gt;
&lt;/dict&gt;
</code></pre><p>Or, represented visually:</p><img src="https://ratnesh-jain.github.io/Images/Multiple-Scene-Info.png" alt="Info-plist"/><h2>The Problem</h2><video controls>
    <source src="https://ratnesh-jain.github.io/Videos/MultiSceneStore.mov" type="video/mp4">
</video><p>As depicted in the above video, both scenes are utilizing the same store, which is not desirable behavior for this app. Given its nature as a file browser app, it should have separate state for different paths.</p><h3>Current App Setup</h3><pre><code><span class="keyword">import</span> AppFeature
<span class="keyword">import</span> ComposableArchitecture
<span class="keyword">import</span> SwiftUI

<span class="keyword">@main
struct</span> FileBrowserApp: <span class="type">App</span> {

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">AppView</span>(store: .<span class="keyword">init</span>(initialState: <span class="type">AppFeature</span>.<span class="type">State</span>() {
                <span class="type">AppFeature</span>()
            })
        }
    }
    
}
</code></pre><p>At first glance, it may seem appropriate to create a store at the App level for reuse across all windows/scenes.</p><pre><code><span class="keyword">@main
struct</span> FileBrowserApp: <span class="type">App</span> {

    <span class="keyword">let</span> store: <span class="type">StoreOf</span>&lt;<span class="type">AppFeature</span>&gt; = .<span class="keyword">init</span>(initialState: <span class="type">AppFeature</span>.<span class="type">State</span>()) {
        <span class="type">AppFeature</span>()
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">AppView</span>(store: store)
        }
    }
    
}

</code></pre><p>However, as of SwiftUI in iOS 17, this approach does not create a new <code>WindowGroup</code> but rather utilizes the same, resulting in the shared store issue. To address this, we can programmatically opt-in using the <code>UISceneDelegate</code> class.</p><h3>The Solution</h3><p>To implement a SceneDelegate, we can utilize two methods: one by installing AppDelegate and the other by using Info.plist. Here, we adopt the former approach.</p><pre><code><span class="keyword">class</span> FileBrowserAppDelegate: <span class="type">NSObject</span>, <span class="type">UIApplicationDelegate</span> {

    <span class="keyword">func</span> application(
        <span class="keyword">_</span> application: <span class="type">UIApplication</span>, configurationForConnecting connectingSceneSession: <span class="type">UISceneSession</span>, options: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>
    ) -&gt; <span class="type">UISceneConfiguration</span> {
        <span class="keyword">let</span> sceneConfig = <span class="type">UISceneConfiguration</span>(name: <span class="keyword">nil</span>, sessionRole: connectingSceneSession.<span class="property">role</span>)

        <span class="comment">// Defining a delegate Class when there is a new session to about to connect.</span>
        sceneConfig.<span class="property">delegateClass</span> = <span class="type">FileBrowserSceneDelegate</span>.<span class="keyword">self
        return</span> sceneConfig
    }

}
</code></pre><p>In the above code, we assign a scene delegate using <code>sceneConfig.delegateClass = FileBrowserSceneDelegate.self</code>. The <code>FileBrowserSceneDelegate</code> class appears as follows:</p><pre><code><span class="keyword">class</span> FileBrowserSceneDelegate: <span class="type">NSObject</span>, <span class="type">UIWindowSceneDelegate</span>, <span class="type">ObservableObject</span> {

    <span class="keyword">var</span> store: <span class="type">StoreOf</span>&lt;<span class="type">AppFeature</span>&gt; = {
        .<span class="keyword">init</span>(initialState: <span class="type">AppFeature</span>.<span class="type">State</span>()) {
            <span class="type">AppFeature</span>()
        }
    }()
    
}
</code></pre><p>Here, we create a store for the app in the <code>SceneDelegate</code>, as a new <code>SceneDelegate</code> instance is created for every scene session. Notably, <code>FileBrowserSceneDelegate</code> conforms to the <code>ObservableObject</code> protocol, allowing SwiftUI to automatically install the <code>SceneDelegate</code> instance to <code>EnvironmentObject</code>. Consequently, we can access the store from the sceneDelegate via <code>EnvironmentObject</code>, as illustrated below:</p><pre><code><span class="keyword">struct</span> AppContainer: <span class="type">View</span> {

    <span class="keyword">@EnvironmentObject var</span> sceneDelegate: <span class="type">FileBrowserSceneDelegate</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">AppView</span>(store: sceneDelegate.<span class="property">store</span>)
            .<span class="call">onOpenURL</span> { url <span class="keyword">in</span>
                sceneDelegate.<span class="property">store</span>.<span class="call">send</span>(.<span class="call">openURL</span>(url))
            }
    }
    
}
</code></pre><p>To access the EnvironmentObject, we encapsulate it within a separate view such as AppContainer. We can then update FileBrowserApp (entry point) as follows:</p><pre><code><span class="keyword">struct</span> FileBrowserApp: <span class="type">App</span> {
    
    <span class="keyword">@UIApplicationDelegateAdaptor</span>(<span class="type">FileBrowserAppDelegate</span>.<span class="keyword">self</span>) <span class="keyword">var</span> appDelegate

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">AppContainer</span>()
        }
    }
}
</code></pre><p>To integrate an AppDelegate into a SwiftUI App, we utilize the <code>@UIApplicationDelegateAdaptor</code> property wrapper.</p><video controls>
    <source src="https://ratnesh-jain.github.io/Videos/Multi-Scene-Solution.mov" type="video/mp4">
</video><h2>Opening Window via User Input</h2><p>Occasionally, there arises a need to open a new window specifically for a directory, a functionality reserved for iPadOS/macOS environments only.</p><video controls>
    <source src="https://ratnesh-jain.github.io/Videos/Open-In-Window.webm" type="video/webm">
</video><p>SwiftUI offers environment property wrappers tailored for such adaptations:</p><pre><code><span class="keyword">@Environment</span>(\.<span class="property">supportsMultipleWindows</span>) <span class="keyword">var</span> supportsMultipleWindows
<span class="keyword">@Environment</span>(\.<span class="property">openWindow</span>) <span class="keyword">var</span> openWindow

<span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(store.<span class="property">items</span>) { item <span class="keyword">in</span>
        <span class="type">DirectoryItemView</span>(item, store: store)
            .<span class="call">contextMenu</span> {
                <span class="keyword">if</span> supportsMultipleWindows {
                    <span class="type">Button</span>(<span class="string">"Open in Window"</span>) {
                        <span class="call">openWindow</span>(value: item.<span class="property">path</span>)
                    }
                }
            }
    }
}
</code></pre><p>However, these property wrappers retrieve their values solely within a View, thereby introducing a dependency that diminishes the testability of our feature. To mitigate this, we can employ a Dependency client for UIApplication-related operations.</p><h3>UIApplication Dependency</h3><pre><code><span class="keyword">@DependencyClient
public struct</span> UIApplicationClient {
    <span class="keyword">public var</span> supportsMultipleWindows: () -&gt; <span class="type">Bool</span> = { <span class="keyword">false</span> }
    <span class="keyword">public var</span> openWindow: (<span class="keyword">_</span> path: <span class="type">String</span>) <span class="keyword">async</span> -&gt; <span class="type">Void</span>
}

<span class="keyword">extension</span> <span class="type">UIApplicationClient</span>: <span class="type">DependencyKey</span> {
    <span class="keyword">public static var</span> liveValue: <span class="type">UIApplicationClient</span> = {
        <span class="keyword">return</span> .<span class="keyword">init</span> {
            <span class="type">UIApplication</span>.<span class="property">shared</span>.<span class="property">supportsMultipleScenes</span>
        } openWindow: { path <span class="keyword">in
            let</span> activity = <span class="type">NSUserActivity</span>(activityType: <span class="string">"path"</span>)
            activity.<span class="property">userInfo</span> = [<span class="string">"path"</span>: path]
            <span class="keyword">await</span> <span class="type">UIApplication</span>.<span class="property">shared</span>.<span class="call">activateSceneSession</span>(
                for: <span class="type">UISceneSessionActivationRequest</span>(
                    role: .<span class="dotAccess">windowApplication</span>,
                    userActivity: activity
                )
            )
        }
    }()
}
</code></pre><ul><li><code>supportsMultipleWindows</code> will return true if the app runs on <code>iPadOS</code> and if the Info.plist contains the <code>UIApplicationSupportsMultipleScenes</code> key set to true.</li></ul><ul><li>The <code>openWindow</code> method opens a new window by activating a Scene Session and passing the path via <code>NSUserActivity</code>.</li></ul><p>We can integrate this dependency into the DirectoryFeature as follows:</p><pre><code><span class="keyword">@Reducer
public struct</span> DirectoryFeature {
    <span class="keyword">@ObservableState
    public struct</span> State: <span class="type">Equatable</span> {
        <span class="keyword">var</span> supportsMultipleWindows: <span class="type">Bool</span>
        
        <span class="keyword">init</span>() {
            <span class="keyword">@Dependency</span>(\.<span class="property">uiApplicationClient</span>) <span class="keyword">var</span> uiApp
            <span class="keyword">self</span>.<span class="property">supportsMultipleWindows</span> = uiApp.<span class="call">supportsMultipleWindows</span>()
        }
    }
    
    <span class="keyword">public enum</span> Action: <span class="type">Equatable</span> {
        <span class="keyword">case</span> contextMenu(<span class="type">MenuAction</span>, item: <span class="type">ItemPath</span>)
        
        <span class="keyword">public enum</span> MenuAction: <span class="type">Equatable</span> {
            <span class="keyword">case</span> openInWindow
            ...
        }
    }
    
    <span class="keyword">@Dependency</span>(\.<span class="property">uiApplicationClient</span>) <span class="keyword">private var</span> uiApp
    
    <span class="keyword">public init</span>() {}
    
    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">ReducerOf</span>&lt;<span class="type">Self</span>&gt; {
        <span class="type">Reduce</span>&lt;<span class="type">State</span>, <span class="type">Action</span>&gt; { state, action <span class="keyword">in
            switch</span> action {
                <span class="keyword">case</span> .<span class="dotAccess">contextMenu</span>(<span class="keyword">let</span> action, <span class="keyword">let</span> item):
                    <span class="keyword">switch</span> action {
                    <span class="keyword">case</span> .<span class="dotAccess">openInWindow</span>:
                        <span class="keyword">return</span> .<span class="call">run</span> { send <span class="keyword">in
                            await</span> uiApp.<span class="call">openWindow</span>(path: item.<span class="property">path</span>)
                        }
                        ...
                    }
            }
        }
    }
}
</code></pre><p>To retrieve the NSUserActivity for the new scene, we incorporate the following code into our SceneDelegate:</p><pre><code><span class="keyword">class</span> FileBrowserSceneDelegate: <span class="type">NSObject</span>, <span class="type">UIWindowSceneDelegate</span>, <span class="type">ObservableObject</span> {
    <span class="keyword">var</span> store: <span class="type">StoreOf</span>&lt;<span class="type">AppFeature</span>&gt; = {
        .<span class="keyword">init</span>(initialState: <span class="type">AppFeature</span>.<span class="type">State</span>()) {
            <span class="type">AppFeature</span>()
        }
    }()

    
    <span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>, willConnectTo session: <span class="type">UISceneSession</span>, options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
        <span class="keyword">if let</span> userActivity = connectionOptions.<span class="property">userActivities</span>.<span class="property">first</span>,
            <span class="keyword">let</span> path = userActivity.<span class="property">userInfo</span>?[<span class="string">"path"</span>] <span class="keyword">as</span>? <span class="type">String</span>
        {
            store.<span class="call">send</span>(.<span class="call">updatePath</span>(path))
        }
    }
}
</code></pre><p>Consequently, creating a fresh store and updating its path upon receiving a new path in the user activity from the connection options will allow us to utilize the multiple windows feature of iPadOS accurately.</p><p>We trust you find this article insightful and informative. Thank you for reading.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://ratnesh-jain.github.io/stories/AssetPlugin</guid><title>Asset Plugin Library</title><description>Asset Plugin generator for asset catalogue when used within swift package.</description><link>https://ratnesh-jain.github.io/stories/AssetPlugin</link><pubDate>Mon, 1 Apr 2024 15:30:00 +0530</pubDate><content:encoded><![CDATA[<h1>Asset Plugin Library</h1><p>Library: <a href="https://github.com/ratnesh-jain/AssetPluginLibrary">https://github.com/ratnesh-jain/AssetPluginLibrary</a></p><p>Utilizing the local Swift Package Manager (SPM) for Apple platform development offers a plethora of advantages:</p><ul><li><strong>Enhanced compile time</strong>: SPM efficiently manages dependencies, reducing compilation times.</li><li><strong>Isolated feature creation</strong>: SPM facilitates the creation of isolated features, enhancing testability.</li><li><strong>Improved Xcode preview integration</strong>: Swift package targets/modules seamlessly integrate with Xcode preview functionality, allowing for rapid iteration and refined UI development.</li></ul><p>Since the release of Xcode 15, it automatically generates source code for type-safe asset access, a highly beneficial feature. This includes both Xcode project's Asset Catalogs and from Swift packages.</p><p>However, there's currently a limitation wherein Xcode doesn't generate public methods for xcassets within Swift packages. To address this gap, our library offers a solution akin to Xcode's functionality.</p><p>Let's explore the issue further and discover how leveraging the <strong>AssetPluginLibrary</strong> can effectively mitigate it</p><h2>The Problem</h2><p>Create a Swift package and add a folder inside the <code>Sources</code> directory named "Resources". Now let add Asset catelogue to the newly created <code>Resources</code> directory.<br><img src="https://ratnesh-jain.github.io/Images/AssetPluginLibrary/AddingAssetsCatelogeToModule.png" alt="Adding Asset Catelogues"/></p><p>Let's add few images to the <code>Media</code> Asset Catelog.</p><img src="https://ratnesh-jain.github.io/Images/AssetPluginLibrary/AddingAssets.png" alt="Adding Assets"/><p>Now if we build the package, Xcode will generate some code to access the media assets as shown below.</p><img src="https://ratnesh-jain.github.io/Images/AssetPluginLibrary/XcodeGeneratedCode.png" alt="Xcode Generated Code"/><p>As we will see, this generated code does not have any access control modifiers, which is internal by default. This will cause the access to the Resources module only, but we need to access these across other features creating Views for user interfaces.</p><h2>The Solution</h2><p>We can now add the <a href="https://github.com/ratnesh-jain/AssetPluginLibrary">AssetPluginLibrary</a> as a dependency to our package.</p><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"Application"</span>,
    platforms: [.<span class="call">iOS</span>(.<span class="dotAccess">v17</span>)],
    products: [
        .<span class="call">library</span>(
            name: <span class="string">"Application"</span>,
            targets: [<span class="string">"Application"</span>]),
    ],
    dependencies: [
+        .<span class="call">package</span>(url: <span class="string">"https://github.com/ratnesh-jain/AssetPluginLibrary"</span>, .<span class="dotAccess">upToNextMajor</span>(from: <span class="string">"0.0.1"</span>)),
    ],
    targets: [
        .<span class="call">target</span>(name: <span class="string">"Resources"</span>, dependencies: []),
        .<span class="call">target</span>(
            name: <span class="string">"Application"</span>, dependencies: [<span class="string">"Resources"</span>]),
        .<span class="call">testTarget</span>(
            name: <span class="string">"ApplicationTests"</span>,
            dependencies: [<span class="string">"Application"</span>]),
    ]
)
</code></pre><p>Example Source: <a href="https://github.com/ratnesh-jain/AssetPluginLibraryExamplePackage/blob/main/Package.swift">Package.swift</a></p><p>As we add this library as a package dependency, and it exports a SwiftPackagePlugin, Xcode will now shows an plugin action <code>Generate Asset Resources</code> to the our Package's context menu as shown below.</p><img src="https://ratnesh-jain.github.io/Images/AssetPluginLibrary/ThePlugin.png" alt="The Plugin"/><p>Xcode will now preset a modal for selecting module in which we have <code>.xcassets</code> file which is <code>Resources</code> in this example.</p><ul><li>NOTE: For Xcode to show <code>Resources</code> as a input option, we need to make the <code>Resources</code> target as a product first as below.</li></ul><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"Application"</span>,
    platforms: [.<span class="call">iOS</span>(.<span class="dotAccess">v17</span>)],
    products: [
        <span class="comment">// Products define the executables and libraries a package produces, making them visible to other packages.</span>
        .<span class="call">library</span>(
            name: <span class="string">"Application"</span>,
            targets: [<span class="string">"Application"</span>]),
+        .<span class="call">library</span>(
+            name: <span class="string">"Resources"</span>,
+            targets: [<span class="string">"Resources"</span>]
+        ),
    ],

</code></pre><img src="https://ratnesh-jain.github.io/Images/AssetPluginLibrary/SelectTheResourcesModule.png" alt="Select the Resources"/><p>This plugin action will create a new swift file called <code>AssetResource</code> in which it generates all the code similar to Xcode but with public access control modifier as shown in screenshot below.</p><img src="https://ratnesh-jain.github.io/Images/AssetPluginLibrary/PublicGeneratedCode.png" alt="PublicGeneratedCode"/><p>Now we can import the Resources module to our Application module, and we can access the newly generated assets using a new Image initialiser <code>Image(asset: ImageAssetResource)</code>.</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> Resources
<span class="keyword">import</span> SwiftUI

<span class="keyword">public struct</span> AppFeature: <span class="type">View</span> {
    
    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
+            <span class="type">Image</span>(asset: .<span class="dotAccess">appleMaps</span>)
                .<span class="call">resizable</span>()
                .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fit</span>)
+            <span class="type">Image</span>(asset: .<span class="dotAccess">swiftScript</span>)
                .<span class="call">resizable</span>()
                .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fit</span>)
+            <span class="type">Image</span>(asset: .<span class="dotAccess">swiftui</span>)
                .<span class="call">resizable</span>()
                .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fit</span>)
        }
    }
    
}
</code></pre><p>Example: <a href="https://github.com/ratnesh-jain/AssetPluginLibraryExamplePackage/blob/main/Sources/Application/AppFeature.swift">Application.swift</a></p><img src="https://ratnesh-jain.github.io/Images/AssetPluginLibrary/AccessAcrossModules.png" alt="AccessAcrossModules"/><p>We trust you find this article insightful and informative. Thank you for reading.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://ratnesh-jain.github.io/about/AboutMe</guid><title>About My Self</title><description>Welcome to my corner of the web! Delve into the world of Apple Apps Development with me, where innovation meets precision. Explore my portfolio, projects, and insights crafted with dedication.</description><link>https://ratnesh-jain.github.io/about/AboutMe</link><pubDate>Mon, 1 Apr 2024 12:00:00 +0530</pubDate><content:encoded><![CDATA[<h1>About My <code>Self</code></h1><p>Welcome to my corner of the web! Delve into the world of Apple Apps Development with me, where innovation meets precision. Explore my portfolio, projects, and insights crafted with dedication since 2015. This site is created using the <a href="https://github.com/johnsundell/publish">Publish</a>.</p><pre><code><span class="keyword">@main
struct</span> AboutMe {
    <span class="keyword">static func</span> main() <span class="keyword">throws</span> {
        <span class="call">print</span>(<span class="string">"Welcome to Personal blog of Ratnesh Jain."</span>)
        <span class="keyword">try</span> <span class="call">showAboutMe</span>()
    }
    
    <span class="keyword">private static func</span> showAboutMe() <span class="keyword">throws</span> {
        <span class="keyword">let</span> contentPath = <span class="keyword">try</span> <span class="type">Bundle</span>.<span class="property">module</span>.<span class="call">path</span>(forResource: <span class="string">"resume"</span>, ofType: <span class="string">"md"</span>)
        <span class="keyword">try</span> <span class="call">renderMarkdown</span>(at: contentPath)
    }
}
</code></pre><blockquote><p>"Welcome to Personal blog of Ratnesh Jain."</p></blockquote><h2>Resume</h2><ul><li>Welcome to my professional portfolio. My name is Ratnesh Jain, and I specialize in iOS App Development, a journey I embarked upon in 2015.</li><li>Over the years, I've had the privilege of crafting numerous applications from inception to execution, as well as providing ongoing maintenance for existing ones.</li><li>I invite you to explore my projects, each a testament to my dedication and innovative approach. Through showcasing select tasks within these projects, I aim to offer insight into my problem-solving methodologies and the meticulous thought process underlying my work.</li><li>Thank you for considering my profile and I look forward to potential collaboration.</li></ul><h2>Showcase</h2><h3>#6. Langaku</h3><ul><li><strong>App Store Link</strong>: <a href="https://langaku.app">Langaku</a></li><li><strong>Domain</strong>: Educational</li><li><strong>Efforts</strong>:<ul><li>Developed an open-source Swift package plugin, <a href="https://github.com/ratnesh-jain/AssetPluginLibrary">AssetPluginLibrary</a>, designed for efficient management of assets within local Swift packages.</li><li>Spearheaded the refactoring of application features into independent, isolated, and testable modules by leveraging Swift packages.</li><li>Orchestrated the seamless integration of OneSignal from AWS Pinpoint, significantly enhancing notification delivery for non-technical members.</li><li>Executed a migration from Combine and closure-based code to modern Swift async-await paradigm, optimizing codebase efficiency and readability.</li><li>Demonstrated adept problem-solving skills by identifying and resolving Swift concurrency issues to enhance application stability.</li><li>Engineered custom navigation transition animations, enhancing overall user experience (UX) through refined design aesthetics.</li><li>Deployed Bitrise CI/CD integration to streamline development operations and foster a more efficient workflow.</li><li>Elevated GraphQL code generation by implementing Swift executable scripts, facilitating enhanced functionality and performance.</li><li>Designed and implemented Widgets (utilizing WidgetKit) for recording vocabulary reading logs, enhancing user engagement and productivity.</li><li>Developed an Auto play feature for comic chapter pages, improving user accessibility and convenience during browsing sessions.</li></ul></li></ul><h3>#5. Quickget</h3><ul><li><strong>App Store Link</strong>: <a href="https://apps.apple.com/us/app/quickget-10分程でなんでもデリバリー/id1459529888">Quickget</a></li><li><strong>Domain</strong>: Food delivery</li><li><strong>Efforts</strong>:<ul><li>Integrated SwiftUI features into existing UIKit App.</li><li>Utilized executable Swift package targets for Xcode's build and archive process.</li><li>Implemented CI/CD with GitHub Actions using Self-hosted runner option.</li><li>Developed Widgets for User's carts and running discounts.</li><li>Migrated UserDefaults to AppGroup's suite for WidgetKit extension data sharing.</li><li>Employed Apollo-iOS for GraphQL APIs with offline support.</li><li>Accelerated Unit &amp; UI testing on GitHub Action runners with cached requests/responses using Apollo-iOS API hooks/middlewares.</li></ul></li></ul><h3>#4. Shakti Studio</h3><ul><li><strong>Domain</strong>: Social Media</li><li><strong>Efforts</strong>:<ul><li>Designed an intuitive interface tailored for beginners, akin to DJay app's simplicity.</li><li>Developed the app entirely using SwiftUI.</li><li>Implemented Audio effects such as Reverb, Delay, Mixing, Trimming, and Export using AVFoundation.</li><li>Enabled users to create and invite friends to their own social music groups for collaboration.</li><li>Integrated functionality to import music files from both iOS Files app and Google Drive.</li></ul></li></ul><h3>#3. Legend Legacy</h3><ul><li><strong>App Store Link</strong>: <a href="https://apps.apple.com/au/app/legend-legacy/id1477616703">Legend Legacy</a></li><li><strong>Domain</strong>: Social Media</li><li><strong>Efforts</strong>: Video Recorder, Video Trimmer, Playback.<ul><li>Developed Legend Legacy using Swift language and MVC architecture.</li><li>Designed as a social media app to create video logs for posterity, inspiring future generations.</li><li>Engineered a custom Video recorder with pause and resume functionality, surpassing default Camera app features in iOS.</li><li>Engineered a custom Video recorder with pause and resume functionality, surpassing default Camera app features in iOS.</li><li>Crafted a unique game stage path utilizing UICollectionView decoration view.</li></ul></li></ul><h3>#2. Reiwa.com</h3><ul><li><strong>App Store Link</strong>: <a href="https://apps.apple.com/in/app/reiwa-com-real-estate/id1417769562">reiwa.com</a></li><li><strong>Domain</strong>: Real Estate</li><li><strong>Efforts</strong>:<ul><li>Developed this app from scratch as a universal application using Swift language and MVC architecture.</li><li>Ensured optimal utilization of the larger iPad canvas by implementing a fully functional Container ViewController supporting all layout environments (iPhone portrait, iPad portrait, iPad landscape, iPad split screen with other apps).</li><li>Implemented an innovative feature enabling users to freely draw on Google Maps to highlight areas of interest and facilitate property search within selected regions.</li></ul></li></ul><h3>#1. HopOnIndia</h3><ul><li><strong>App Store Link</strong>: <a href="https://apps.apple.com/in/app/hopon-india/id1205385874">HopOnIndia</a></li><li><strong>Domain</strong>: Travel</li><li><strong>Efforts</strong>:<ul><li>Developed an app catering to enthusiasts exploring historic sites across India, with coverage including Mumbai.</li><li>Implemented a unique feature synchronizing audio playback with users' walking distance.</li><li>Incorporated In-App Purchase functionality for route purchases within the app.</li></ul></li></ul><h2>Side projects</h2><p>To learn about the latest features of Swift, SwiftUI &amp; iOS 17, also <a href="https://github.com/pointfreeco/swift-composable-architecture">The Composable Architecture</a>.</p><h3>#1. AudioBookShelf</h3><ul><li><strong>Source Website</strong>: <a href="https://github.com/advplyr/audiobookshelf">AudioBookShelf Github</a></li><li><strong>UIFramework</strong>: SwiftUI</li><li><strong>Language</strong>: Swift 5.7</li><li><strong>Architecture</strong>: The Composable Architecture</li><li><strong>Project Structure</strong>: Local Swift Package Manager for isolated independent feature.</li><li><strong>Target OSes</strong>: iOS 17, iPadOS 17, tvOS 17</li><li><strong>Demonstration</strong>:<ul></ul></li></ul><video controls style="width: 50%; margin-left: 32px;">
            <source src="https://ratnesh-jain.github.io/Videos/AboutMe/AudioBookShelf-Intro.mp4" type="video/mp4">
        </video><h3>#2. FileBrowser</h3><ul><li><strong>Source Website</strong>: <a href="https://github.com/filebrowser/filebrowser">FileBrowser Github</a></li><li><strong>UIFramework</strong>: SwiftUI</li><li><strong>Language</strong>: Swift 5.8/5.9</li><li><strong>Architecture</strong>: The Composable Architecture</li><li><strong>Project Structure</strong>: Local Swift Package Manager for isolated independent feature.</li><li><strong>Target OSes</strong>: iOS 17, iPadOS 17, visionOS 1.0, macOS 14</li><li><strong>Dev Ops</strong>: Unit testing with <a href="https://github.com/fastlane/fastlane">fastlane</a> and swift-format linting on Github action runner.</li><li><strong>Demonstration</strong>:</li></ul><div style="display: flex; justify-content: flex-start;">
            <video controls style="width: 50%; margin-right: 16px; margin-left: 32px;">
                <source src="https://ratnesh-jain.github.io/Videos/AboutMe/FileBrowser-Intro.mp4" type="video/mp4">
            </video>
            <video controls style="width: 50%; margin-right: 16px;">
                <source src="https://ratnesh-jain.github.io/Videos/AboutMe/FileBrowser-Jumpbar.mp4" type="video/mp4">
            </video>
        </div><h2>Open Source</h2><h3>#1. <a href="https://github.com/ratnesh-jain/assetpluginlibrary">AssetPluginLibrary</a></h3><ul><li>A swift-package-plugin library for generating static media resource source code when working inside local swift package target for sharing common media resources through out the other features.</li></ul><h3>#2. <a href="https://github.com/ratnesh-jain/SwiftFormatLinter">SwiftFormatLinter</a></h3><ul><li>A swift-executable archive for linting swift files of source directory since the default swift-format linting does not accept an ignore-file to prevent participation for certain files.</li></ul><h3>#3. <a href="https://github.com/ratnesh-jain/AppService">AppService</a></h3><ul><li>A wrapper around the <a href="https://github.com/Moya/Moya">moya swift</a> for faster REST API integration.</li></ul>]]></content:encoded></item></channel></rss>